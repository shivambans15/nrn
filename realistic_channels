import numpy as np
from neuron import h
from neuron.units import ms, mV, µm
import matplotlib.pyplot as plt
import multiprocessing as mp
from tqdm import tqdm

# =============================================================================
# Papers
# =============================================================================
# Rattay, Lutter, Felix 2001: https://www.sciencedirect.com/science/article/pii/S0378595500002562?via%3Dihub#aep-section-id28
# Hanekmon, 2001: https://journals.lww.com/ear-hearing/abstract/2001/08000/three_dimensional_spiraling_finite_element_model.5.aspx
# Rattay et al., 2013 - https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0079256
# Channel Differences: https://www.jneurosci.org/content/31/27/10101#sec-16

# =============================================================================
# Simulation Parameters
# =============================================================================
simulation_temperature = 36.0 # Temperature in degrees Celsius - COMMON VALUE
v_init = -65 * mV # Initial membrane potential - COMMON VALUE
simulation_dt = 0.03 * ms # Simulation time step
simulation_tstop = 105 * ms # Total simulation time

# =============================================================================
# Neuron Morphology Paramaters
# =============================================================================
node_length = 1 * µm # Length of the node - FROM IMAGING IN LAB
node_diameter = 1.5 * µm # Diameter of the node - FROM IMAGING IN LAB
node_nseg = 101 # Number of segments in the node

# =============================================================================
# Neuron Biophysics Parameters
# =============================================================================
axon_Ra = 100 # Axial resistance in ohm*cm - RATTAY, LUTTER, FELIX, 2001
axon_cm = 1 # Membrane capacitance in uF/cm² - RATTAY, LUTTER, FELIX, 2001
gkbar_default = 0.36 # Potassium conductance in S/cm² - HANEKMON, 2001 # Default for uniform K+ conductance
default_gkcnqbar = 0.036 # Default for uniform KCNQ conductance
gl_default = 0.00015 # Leak conductance in S/cm² - RATTAY ET AL., 2013
el_default = -65 * mV # Leak reversal potential - RATTAY ET AL., 2013

# =============================================================================
# Cluster Parameters
# =============================================================================
default_cluster_width = 0.1 * µm # Default cluster width
default_conductance = 0.12 # Default average conductance per unit area in S/cm²
cluster_position_margin = 0.1 * µm # Margin from the ends when generating cluster positions
sigma_factor = 6 # Number of standard devs around the cluster peak

# =============================================================================
# Stimulus Parameters
# =============================================================================
default_stim_amp = 0 # Default stimulus amplitude in nA
interstim_interval = 5 # Interval between stimuli in ms
total_sim_time = 100 # Total time for stimuli in ms
stim_duration = 0.1 # Duration of each stimulus in ms
stim_location = 0.0 # Location along the node (0.0 - 1.0)
stim_start_delay = 0.5 # Initial delay before the first stimulus in ms

# =============================================================================
# Recording Parameters
# =============================================================================
recording_loc = 1.0 # Location along the node where voltage is recorded (0.0 - 1.0)

# =============================================================================
# AP Detection Parameters
# =============================================================================
ap_threshold = 20 # Voltage threshold in mV for detecting action potentials

# =============================================================================
# Plotting Parameters
# =============================================================================
plot_baseline = -80 # Baseline voltage for plots in mV
stim_bump_height = 5 # Height of stimulus indicator bumps in mV
plot_figsize_v = (8, 4) # Figure size for voltage plots
plot_ylim_v = (-80, 100) # Y-axis limits for voltage plots
plot_figsize_gnabar = (12, 6) # Figure size for conductance plots
bar_width = 0.005 # Bar width for conductance plots

# =============================================================================
# Initialize Neuron
# =============================================================================
h.load_file("stdrun.hoc")
for sec in h.allsec():
    h.delete_section(sec=sec)

# =============================================================================
# Define the Cell
# =============================================================================
from neuron import h
import numpy as np

class OneCompCell:
    def __init__(
        self,
        conductance=default_conductance,
        cluster_details=None,  # Sodium cluster details
        potassium_cluster_details=None,  # Potassium cluster details
        normalize=False,
        use_nav16=True,  # Flag to use nav1.6 or hh Na channel
        use_kcnq=True    # Flag to use kcnq or hh K channel
    ):
        """
        Parameters:
        - conductance: Average conductance per unit area (gbar in S/cm²).
        - cluster_details: List of (position, height, width) for sodium channel clusters.
        - potassium_cluster_details: List of (position, height, width) for potassium channel clusters.
        - normalize: If True, scales conductances to maintain average gbar.
        - use_nav16: If True, use nav1.6 channels; otherwise, use hh Na channels.
        - use_kcnq: If True, use kcnq channels; otherwise, use hh K channels.
        """
        self.node = h.Section(name="node")
        self.cluster_details = cluster_details
        self.potassium_cluster_details = potassium_cluster_details
        self.conductance = conductance
        self.normalize = normalize
        self.use_nav16 = use_nav16
        self.use_kcnq = use_kcnq
        self._setup_morphology()
        self._setup_biophysics()

    def _setup_morphology(self):
        self.node.L = node_length
        self.node.diam = node_diameter
        self.node.nseg = node_nseg

    def _setup_biophysics(self):
        self.node.Ra = axon_Ra
        self.node.cm = axon_cm
    
        nseg = self.node.nseg
        x = (np.arange(nseg) + 0.5) / nseg * self.node.L
        gnabar_array = np.zeros(nseg)
        gkbar_array = np.zeros(nseg)
    
        # Insert appropriate sodium channels
        if self.use_nav16:
            self.node.insert("na16a")
        else:
            self.node.insert("hh")
    
        # Insert appropriate potassium channels
        if self.use_kcnq:
            self.node.insert("kcnq")
        else:
            self.node.insert("hh")
    
        # Sodium conductance setup
        if self.cluster_details:
            for pos, height, width in self.cluster_details:
                sigma = width / sigma_factor
                gnabar_array += height * np.exp(-0.5 * ((x - pos) / sigma) ** 2)
    
            if self.normalize:
                average_gbar = np.mean(gnabar_array)
                if average_gbar > 0:
                    scaling_factor = self.conductance / average_gbar
                    gnabar_array *= scaling_factor
    
        # Potassium conductance setup
        if self.potassium_cluster_details:
            for pos, height, width in self.potassium_cluster_details:
                sigma = width / sigma_factor
                gkbar_array += height * np.exp(-0.5 * ((x - pos) / sigma) ** 2)
    
        for i, seg in enumerate(self.node):
            if self.use_nav16:
                seg.na16a.gbar = gnabar_array[i]
            else:
                seg.hh.gnabar = gnabar_array[i]
    
            if self.use_kcnq:
                seg.kcnq.gkcnqbar = gkbar_array[i]
            else:
                seg.hh.gkbar = gkbar_array[i]
                if not self.potassium_cluster_details:
                    seg.hh.gkbar = 0
                    
        average_gnabar = np.mean([seg.na16a.gbar if self.use_nav16 else seg.hh.gnabar for seg in self.node])
        average_gkbar = np.mean([seg.kcnq.gkcnqbar if self.use_kcnq else seg.hh.gkbar for seg in self.node])
        print(f"  Average gnabar: {average_gnabar:.4f} S/cm², Average gkbar: {average_gkbar:.4f} S/cm²")
# =============================================================================
# Apply Stim Function
# =============================================================================
def apply_stim(
    cell,
    stim_amp=default_stim_amp,
    interstim=interstim_interval,
    total_time=total_sim_time,
    stim_dur=stim_duration,
    loc=stim_location,
    delay=stim_start_delay,
    std_dev=0.005,  # Standard deviation for Gaussian sampling
    seed=None      # Seed for reproducibility
):
    """
    Apply randomized stimulus events to the cell.

    Parameters:
    - cell: The cell object to stimulate.
    - stim_amp: Mean stimulus amplitude in nA.
    - interstim: Interval between stimuli in ms.
    - total_time: Total time for stimuli in ms.
    - stim_dur: Duration of each stimulus in ms.
    - loc: Location along the node (0.0 - 1.0).
    - delay: Initial delay before the first stimulus in ms.
    - std_dev: Standard deviation for Gaussian sampling of stim amplitudes.
    - seed: Random seed for reproducibility across clusters.

    Returns:
    - stims: List of stimulus objects.
    - stim_times_and_amps: List of (start, end, amp) for each stimulus.
    """
    stims, stim_times_and_amps = [], []

    # Set the random seed for reproducibility
    rng = np.random.default_rng(seed)

    while delay < total_time:
        # Sample the amplitude from a Gaussian distribution
        sampled_amp = rng.normal(loc=stim_amp, scale=std_dev)
        sampled_amp = max(sampled_amp, 0)  # Ensure amplitude is non-negative

        stim = h.IClamp(cell.node(loc))
        stim.delay = delay
        stim.dur = stim_dur
        stim.amp = sampled_amp
        stims.append(stim)
        stim_times_and_amps.append((delay, delay + stim_dur, sampled_amp))
        delay += interstim

    return stims, stim_times_and_amps

# =============================================================================
# Recording Vector Function
# =============================================================================
def set_recording_vectors(cell):
    node_v_vec = h.Vector()
    t_vec = h.Vector()
    node_v_vec.record(cell.node(recording_loc)._ref_v)  # Record at the specified location
    t_vec.record(h._ref_t)
    return node_v_vec, t_vec


# =============================================================================
# Voltage Traces
# =============================================================================
def plot_voltage_traces(voltage_traces, time_vector, x_milliseconds, titles=None, stim_times_list=None):
    """
    Plots voltage traces with stimulus tick marks.
    """
    num_traces = len(voltage_traces)

    if num_traces == 0:
        print("No voltage traces to plot.")
        return

    x_index = np.where(time_vector <= x_milliseconds)[0][-1]

    fig, axes = plt.subplots(num_traces, 1, figsize=(10, 4 * num_traces), sharex=True)

    if num_traces == 1:
        axes = [axes]

    for i, trace in enumerate(voltage_traces):
        axes[i].plot(time_vector[:x_index + 1], trace[:x_index + 1])
        axes[i].set_ylabel("Voltage (mV)")
        if titles:
            axes[i].set_title(titles[i])
        else:
            axes[i].set_title(f"Voltage Trace {i+1}")
        axes[i].grid(True)
        if stim_times_list:
            axes[i].set_xticks(stim_times_list[i], minor=True)
            axes[i].tick_params(axis='x', which='minor', length=4, color='r')
        axes[i].set_xlim(time_vector[0], x_milliseconds)
        axes[i].set_ylim(-80, 60)
        
    axes[-1].set_xlabel("Time (ms)")
    plt.tight_layout()
    plt.show()

# =============================================================================
# Run Simulation Function
# =============================================================================
def simulate(tstop=simulation_tstop):
    h.celsius = simulation_temperature
    h.finitialize(v_init)
    h.tstop = tstop
    h.dt = simulation_dt
    h.run()

# =============================================================================
# Functions for parallel simulation
# =============================================================================
def run_simulation_worker(params):
    """Runs a single simulation trial - worker function for multiprocessing."""
    stim_amp, cluster_details, potassium_cluster_details, std_dev, interstim, total_time, seed = params

    one_comp = OneCompCell(
        cluster_details=cluster_details,
        potassium_cluster_details=potassium_cluster_details,
        conductance=default_conductance,
        use_kcnq=True,
        use_nav16=True,
        normalize=False
    )

    stims, stim_times_and_amps = apply_stim(
        one_comp,
        stim_amp=stim_amp,
        interstim=interstim,
        total_time=total_time,
        std_dev=std_dev,
        seed=seed
    )

    node_v_vec, t_vec = h.Vector(), h.Vector()
    node_v_vec.record(one_comp.node(recording_loc)._ref_v)
    t_vec.record(h._ref_t)

    h.celsius = simulation_temperature
    h.finitialize(v_init)
    h.tstop = total_time
    h.dt = simulation_dt
    h.run()

    node_v_vec_np = np.array(node_v_vec.to_python())
    t_vec_np = np.array(t_vec.to_python())

    num_APs = np.sum(np.diff(node_v_vec_np >= ap_threshold) == 1)
    num_stimuli = len(stim_times_and_amps)
    fires_per_stim = num_APs / num_stimuli
    probability = num_APs / num_stimuli if num_stimuli > 0 else 0
    probability = min(probability, 1.0)
    print(f"Process {mp.current_process().name}, seed {seed}: Probability = {probability}, APs = {num_APs}, Stimuli = {num_stimuli}")

    stim_times = [start for start, _, _ in stim_times_and_amps] # extract only start times.

    return probability, node_v_vec_np, t_vec_np, stim_times, fires_per_stim


def simulate_and_plot_distributions_parallel(
    stim_amp,
    cluster_details_list,
    potassium_cluster_details_list,
    num_simulations=1000,
    epoch_duration=5000,
    interstim=5,
    std_dev=0.01,
    base_seed=42,
    legend_labels=None,
    num_processes=None
):
    """
    Simulates firing probabilities and captures the first voltage trace for each condition.
    Plots histograms and voltage traces with stimulus tick marks.
    """
    plt.figure(figsize=(12, 8))
    colors = plt.cm.viridis(np.linspace(0, 1, len(cluster_details_list)))
    all_probabilities = []
    voltage_traces = []
    time_vectors = []
    stim_times_list = [] 

    if num_processes is None:
        num_processes = mp.cpu_count()

    print(f"Running simulations using {num_processes} processes.")

    for cluster_idx, ((cluster_details, potassium_cluster_details), color) in enumerate(zip(zip(cluster_details_list, potassium_cluster_details_list), colors)):
        probabilities_per_cluster = []
        params_list = []
        all_fires_per_stim = []

        for sim_idx in range(num_simulations):
            params = (stim_amp, cluster_details, potassium_cluster_details, std_dev, interstim, epoch_duration, base_seed + sim_idx)
            params_list.append(params)

        with mp.Pool(processes=num_processes) as pool:
            results = list(tqdm(pool.imap(run_simulation_worker, params_list), total=num_simulations * len(cluster_details_list), desc=f'Cluster {cluster_idx+1}/{len(cluster_details_list)}', unit='sim'))
            probabilities_per_cluster = [result[0] for result in results]
            fires_per_stim_per_cluster = [result[0] for result in results]
            if cluster_idx == 0:
                time_vectors = [result[2] for result in results]
            if len(voltage_traces) < len(cluster_details_list):
                voltage_traces.append(results[0][1])
                stim_times_list.append(results[0][3])
                all_fires_per_stim.append(fires_per_stim_per_cluster) # Changed to fires per stim
        
        all_probabilities.append(probabilities_per_cluster)

    # Calculate average fires per stim for each cluster
    average_fires_per_stim = [np.mean(fires) for fires in all_fires_per_stim]
    
    # Print average fires per stim
    for i, avg_fires in enumerate(average_fires_per_stim):
        print(f"Average Fires/Stim for {legend_labels[i]}: {avg_fires:.4f}")
    
    # Calculate bin edges for consistent bin widths across histograms
    min_prob = 0.0
    max_prob = 1.0
    bin_edges = np.linspace(min_prob, max_prob, 21)

    # Plot all histograms in a single plt.hist call
    plt.hist(
        all_probabilities,
        bins=bin_edges,
        alpha=0.5,
        color=colors,
        label=legend_labels if legend_labels else [f"Cluster {i+1}" for i in range(len(cluster_details_list))],
        histtype='bar',
        edgecolor='black',
        stacked=False
    )

    # Add labels, legend, and grid
    plt.xlabel('Firing Probability')
    plt.ylabel('Count')
    plt.title('Firing Probability Distributions for Different Clusters')
    plt.xlim(0.0, 1.0)
    plt.legend(title="Cluster Configurations")
    plt.grid(True)
    plt.tight_layout()

    # Plot voltage traces
    plot_voltage_traces(voltage_traces, time_vectors[0], 100, titles=legend_labels, stim_times_list=stim_times_list)

# =============================================================================
# Example Usage - Parallelized Simulation
# =============================================================================

if __name__ == '__main__':
    stim_amp = 0.05  # nA Original was 0.12

    cluster_details_list = [] # Sodium cluster list
    potassium_cluster_details_list = [] # Potassium cluster list

    for num_clusters in (1, 5, 20):  # 1 to 20 clusters - Sodium
        spacing = node_length / num_clusters  # Even spacing along the node
        clusters = [
            (i * spacing + spacing / 2, 0.3, 0.1 * µm)  # (position, height, width) - Sodium
            for i in range(num_clusters)
        ]
        cluster_details_list.append(clusters)

    for num_k_clusters in (24, 20, 5): # 0 to 10 Potassium clusters
        k_spacing = node_length / (num_k_clusters + 1) if num_k_clusters > 0 else node_length
        k_clusters = []
        if num_k_clusters > 0:
            k_clusters = [
                (i * k_spacing + k_spacing / 2, 0.15, 0.2 * µm) # (position, height, width) - Potassium 
                for i in range(1, num_k_clusters + 1)
            ]
        potassium_cluster_details_list.append(k_clusters)


    legend_labels = [
        '1 Na Cluster, 24 K Clusters',
        '5 Na Clusters, 20 K Clusters',
        '20 Na Clusters, 5 K Clusters'] 


    num_simulations = 1 # number of simulations
    epoch_duration = 500 # ms

    simulate_and_plot_distributions_parallel(
        stim_amp=stim_amp,
        cluster_details_list=cluster_details_list, # Pass sodium cluster details
        potassium_cluster_details_list=potassium_cluster_details_list, # Pass potassium cluster details
        num_simulations=num_simulations,
        epoch_duration=epoch_duration,
        interstim=5,
        std_dev=0.05,
        base_seed=42,
        legend_labels=legend_labels,
        num_processes=mp.cpu_count() # Adjust to cpu number
    )
